name: Notify New Blog Post to Telegram # Â∑•‰ΩúÊµÅÁ®ãÂêçÁ®±

# Áï∂ÊúâÊñ∞ÁöÑ push ‰∫ã‰ª∂ÁôºÁîüÊôÇËß∏ÁôºÊ≠§ workflow
on:
  push:
    branches:
      - main
    paths:
      - 'blog/**'
      - 'blog/**/*'

jobs:
  notify_new_post:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get new files in target directory
        id: new-files
        run: |
          TARGET_DIR="blog/"
          CURRENT_SHA="${{ github.sha }}"
          LAST_COMMIT_SHA=$(git rev-parse "${CURRENT_SHA}~1" 2>/dev/null || echo "")
          DETECTED_FILES=""
          if [ -z "$LAST_COMMIT_SHA" ]; then
            find "$TARGET_DIR" -type f -print0 | xargs -0 -r -n 1 echo >> temp_new_files.txt
            DETECTED_FILES=$(cat temp_new_files.txt)
          else
            git diff --name-only --diff-filter=A "${LAST_COMMIT_SHA}" "${CURRENT_SHA}" -- "$TARGET_DIR" -z | xargs -0 -r -n 1 echo >> temp_new_files.txt
            DETECTED_FILES=$(cat temp_new_files.txt)
          fi
          NEW_POST_FILES=""
          for file in $DETECTED_FILES; do
            if [[ "$file" == "$TARGET_DIR"* ]]; then
              NEW_POST_FILES="$NEW_POST_FILES $file"
            fi
          done
          echo "Detected NEW files in ${TARGET_DIR} directory: $NEW_POST_FILES"
          echo "NEW_POST_FILES=${NEW_POST_FILES}" >> "$GITHUB_OUTPUT"

      - name: Process and send Telegram notification
        if: steps.new-files.outputs.NEW_POST_FILES != ''
        env:
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        run: |
          set -e
          TELEGRAM_BOT_TOKEN="${TELEGRAM_BOT_TOKEN}"
          TELEGRAM_CHAT_ID="${TELEGRAM_CHAT_ID}"
          NEW_POST_FILES="${{ steps.new-files.outputs.NEW_POST_FILES }}"
          BASE_URL="https://holybear.me"

          # MarkdownV2 escape function
          escape_markdownv2() {
            printf "%s" "$1" | sed -e 's/[\\_*\[\]()~`>#+\-=|{}.!]/\\&/g'
          }

          for file_path in $NEW_POST_FILES; do
            echo "Processing file: $file_path"
            file_content=$(cat "$file_path")

            # Extract title (frontmatter or first # header)
            TITLE=$(echo "$file_content" | awk -F': ' '/^title:/ {print $2; exit}')
            if [ -z "$TITLE" ]; then
              TITLE=$(echo "$file_content" | awk -F'# ' '/^# / {print $2; exit}')
            fi
            [ -z "$TITLE" ] && TITLE="ÁÑ°Ê®ôÈ°åÊñáÁ´†"

            # Extract category (YAML list, array, or single value)
            CATEGORY=""
            CATEGORY=$(echo "$file_content" | grep -A 1 -iE '^\s*category:' | grep -E '^\s*-\s*' | head -n1 | sed -E 's/^\s*-\s*(.*)/\1/')
            [ -z "$CATEGORY" ] && CATEGORY=$(echo "$file_content" | grep -iE '^\s*category:\s*\[.*\]' | sed -E 's/.*\[\s*([^, ]*).*/\1/')
            [ -z "$CATEGORY" ] && CATEGORY=$(echo "$file_content" | grep -iE '^\s*category:\s*[^-\[]+' | head -n1 | sed -E 's/^\s*category:\s*//')
            CATEGORY=$(echo "$CATEGORY" | sed -E 's/^[[:space:]]+|[[:space:]]+$//g')
            CATEGORY=$(echo "$CATEGORY" | sed -E 's/[\x27"\/]//g')

            # Prefix title with category if present
            if [ -n "$CATEGORY" ]; then
              TITLE="„Äê${CATEGORY}„Äë${TITLE}"
            fi

            # Generate article link
            ARTICLE_SLUG=$(echo "$file_path" | sed -E 's|^blog/(.*)\.md$|\1|')
            ARTICLE_URL="${BASE_URL}/blog/${ARTICLE_SLUG}"

            # Commit message and author
            COMMIT_MESSAGE=$(git log -1 --pretty=%B)
            AUTHOR_NAME=$(git log -1 --pretty=%an)

            # MarkdownV2 escaped fields
            ESCAPED_TITLE=$(escape_markdownv2 "$TITLE")
            ESCAPED_COMMIT_MESSAGE=$(escape_markdownv2 "$COMMIT_MESSAGE")
            ESCAPED_AUTHOR_NAME=$(escape_markdownv2 "$AUTHOR_NAME")

            # Compose message using $'...' for correct newlines
            MESSAGE=$'*üì¢ New push to GitHub*\n'
            MESSAGE+=$'*'"${ESCAPED_TITLE}"$'*\n'
            MESSAGE+=$'```\n'"${ESCAPED_COMMIT_MESSAGE}"$'\n```\n'
            MESSAGE+=$'[‚û°Ô∏è ÈªûÊ≠§Èñ±ËÆÄÊñáÁ´†]('"${ARTICLE_URL}"$')\n'
            MESSAGE+='by `'"${ESCAPED_AUTHOR_NAME}"'`'

            RESPONSE=$(curl -s -X POST "https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage" \
              --data-urlencode "chat_id=${TELEGRAM_CHAT_ID}" \
              --data-urlencode "text=${MESSAGE}" \
              --data-urlencode "parse_mode=MarkdownV2" \
              --data-urlencode "disable_web_page_preview=true")

            if echo "$RESPONSE" | grep -q '"ok":true'; then
              echo "‚úÖ Telegram notification sent successfully for: $file_path"
            else
              echo "‚ùå Failed to send Telegram notification for: $file_path"
              echo "Telegram API Response: $RESPONSE"
            fi
          done
